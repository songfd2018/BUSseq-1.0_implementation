postprob_DE_threshold <- postprob_DE_thr_fun(PPI.est,fdr_threshold=0.1)
L.est <-  estimate_IG_indicators(PPI.est,postprob_DE_threshold)
D.est <- IG_index(L.est)
fdr_cal<-function(.PPI,#the posterior probability of being differentially expressed
.zeta){
K<-ncol(.PPI)
numer <- sum((1-.PPI[,2:K]) * (.PPI[,2:K] > 1-.zeta) )
denom <- sum(.PPI[,2:K] > 1-.zeta)
if(denom == 0){
fdr <- 0
#print("There is no discovery!")
}else{
fdr <- numer / denom
}
return(fdr)
}
postprob_DE_thr_fun<-function(.PPI,
fdr_threshold=0.1){
K<-ncol(.PPI)
zeta_fdr_matr <- NULL
zeta_set <- rev(1 - sort(unique(c(.PPI[,2:K]))))
for(zeta in zeta_set){
fdr <- fdr_cal(.PPI, zeta)
zeta_fdr_matr <- rbind(zeta_fdr_matr, c(zeta, fdr))
if(fdr > fdr_threshold){
break
}
}
ind <- which(zeta_fdr_matr[ ,2] <= fdr_threshold)
ind2 <- which.max(zeta_fdr_matr[ind,2])
ind3 <- ind[ind2] # the index that has the maximum fdr
return(1-as.numeric(zeta_fdr_matr[ind3,1])) #1-kappa
}
#Estimate intrinsic gene indicators
estimate_IG_indicators <- function(.PPI, postprob_DE_threshold = 0.5){
K<-ncol(.PPI)
EstL <- .PPI[,2:K]
EstL[.PPI[,2:K] >= postprob_DE_threshold] <- 1
EstL[.PPI[,2:K] < postprob_DE_threshold] <- 0
message("The output format is a matrix.\n")
message(paste0("Each row represents a gene, and each column",
" corresponds to a subtype from 2 to K\n"))
return(EstL)
}
#Intrinsic gene index
IG_index <- function(EstIGindicators){
ind <- which(rowSums(EstIGindicators) > 0)
message(c(length(ind), "intrinsic genes are found.\n"))
message("The output format is a vector showing the intrinsic gene",
" indices.\n")
return(ind)
}
# intr2<-which(PPI.est[,2]>0.99)
# intr3<-which(PPI.est[,3]>0.99)
# intr4<-which(PPI.est[,4]>0.99)
# intr_high<-unique(unique(intr2,intr3),intr4)
postprob_DE_threshold <- postprob_DE_thr_fun(PPI.est,fdr_threshold=0.05)
L.est <-  estimate_IG_indicators(PPI.est,postprob_DE_threshold)
D.est <- IG_index(L.est)
load("F:/scRNA/progress/summary_pancreas_v12_K12_r1.Rdata")
fdr_cal<-function(.PPI,#the posterior probability of being differentially expressed
.zeta){
K<-ncol(.PPI)
numer <- sum((1-.PPI[,2:K]) * (.PPI[,2:K] > 1-.zeta) )
denom <- sum(.PPI[,2:K] > 1-.zeta)
if(denom == 0){
fdr <- 0
print("There is no discovery!")
}else{
fdr <- numer / denom
}
return(fdr)
}
postprob_DE_thr_fun<-function(.PPI,
fdr_threshold=0.1){
K<-ncol(.PPI)
zeta_fdr_matr <- NULL
zeta_set <- rev(1 - sort(unique(c(.PPI[,2:K]))))
for(zeta in zeta_set){
fdr <- fdr_cal(.PPI, zeta)
zeta_fdr_matr <- rbind(zeta_fdr_matr, c(zeta, fdr))
if( fdr > fdr_threshold){
break
}
}
ind <- which(zeta_fdr_matr[ ,2] <= fdr_threshold)
ind2 <- which.max(zeta_fdr_matr[ind,2])
ind3 <- ind[ind2] # the index that has the maximum fdr
return(1-as.numeric(zeta_fdr_matr[ind3,1])) #1-kappa
}
#Estimate intrinsic gene indicators
estimate_IG_indicators <- function(.PPI, postprob_DE_threshold = 0.5){
K<-ncol(.PPI)
EstL <- .PPI[,2:K]
EstL[.PPI[,2:K] >= postprob_DE_threshold] <- 1
EstL[.PPI[,2:K] < postprob_DE_threshold] <- 0
message("The output format is a matrix.\n")
message(paste0("Each row represents a gene, and each column",
" corresponds to a subtype from 2 to K\n"))
return(EstL)
}
#Intrinsic gene index
IG_index <- function(EstIGindicators){
ind <- which(rowSums(EstIGindicators) > 0)
message(c(length(ind), "intrinsic genes are found.\n"))
message("The output format is a vector showing the intrinsic gene",
" indices.\n")
return(ind)
}
PPI.est <- matrix(para.est$PPI.est,nrow=G)
postprob_DE_threshold <- postprob_DE_thr_fun(PPI.est)
L.est <-  estimate_IG_indicators(PPI.est,postprob_DE_threshold)
D.est <- IG_index(L.est)
intri_gene<-colnames(read)[D.est]
write.table(intri_gene,file=paste0("intri_genes_",ver,".txt"),row.names = F,col.names = F,quote = F)
PPI.est <- matrix(para.est$PPI.est,nrow=G)
postprob_DE_threshold <- postprob_DE_thr_fun(PPI.est,fdr_threshold=0.05)
L.est <-  estimate_IG_indicators(PPI.est,postprob_DE_threshold)
D.est <- IG_index(L.est)
intri_gene<-colnames(read)[D.est]
write.table(intri_gene,file=paste0("intri_genes_",ver,".txt"),row.names = F,col.names = F,quote = F)
install.packages("F:/scRNA/mypackage/BUSseq_0.99.5.tar.gz", repos = NULL, type = "source")
library(BUSseq)
load("G:/scRNA/Journal/Github_reproduce/Mouse_Hematopoietic/Workspace/comparison_workspace.RData")
ARI_values
load("G:/scRNA/Journal/Github_reproduce/Simulation/Workspace/comparison_workspace.RData")
summary(sil_BUSseq)
load("G:/scRNA/Journal/Github_reproduce/Human_Pancreas/Workspace/comparison_workspace.RData")
summary(sil_BUSseq)
summary(sil_MNN)
summary(sil_Seurat)
summary(sil_ZINBW)
library(devtools)
install_github("songfd2018/BUSseq")
install_github("songfd2018/BUSseq")
install_github("songfd2018/BUSseq")
install_github("songfd2018/BUSseq")
browseVignettes("BUSseq")
libray(devtools)
library(devtools)
install_github(songfd2018/BUSseq)
install_github("songfd2018/BUSseq")
browseVignettes("BUSseq")
install_github("songfd2018/BUSseq")
browseVignettes("BUSseq")
library(devtools)
install_github("songfd2018/BUSseq")
install_github("songfd2018/BUSseq")
browseVignettes("BUSseq")
library(BUSseq)
CountData <- BUSseqfits_example$CountData_raw
BUSseqfits_res <- BUSseq_MCMC(ObservedData = CountData, n.celltypes = 4,
n.iterations = 500, working_dir = ".",
showIteration = TRUE, seed = 123)
BIC_BUSseq(BUSseqfits_res)
BIC_BUSseq(BUSseqfits_example)
install_github("songfd2018/BUSseq", build_vignettes = TRUE)
library(devtools)
install_github("songfd2018/BUSseq", build_vignettes = TRUE)
?build_vignettes
sessionInfo()
vignettes(package="BUSseq")
vignette(package="BUSseq")
vignette("BUSseq_user_guide",package="BUSseq")
install.packages("H:/scRNA/mypackage/BUSseq_0.99.6.tar.gz", repos = NULL, type = "source")
vignette("BUSseq_user_guide",package="BUSseq")
install.packages(c('devtools', 'bigmemory', 'gplots', 'knitr', 'BiocStyle', 'BiocGenerics'))
install.packages(c("devtools", "bigmemory", "gplots", "knitr", "BiocStyle", "BiocGenerics"))
#samples from binomial distribution
m <- 2000 # sample number
n <- 8 # trial number
p <- 0.4 # success probability
x <- 0:n
prob_mass <- factorial(n) / (factorial(n-x) * factorial(x)) * p^x * (1-p)^(n-x) #probability mass
prob_cumsum <- cumsum(prob_mass) #cumulative sum of porbability masses
u_vec <- runif(m) #uniform samples
x_vec <- NULL #binomial samples
for(i in 1:m){
x_vec <- c(x_vec, min( which(prob_cumsum >= u_vec[i]) ) - 1)
}
hist(x_vec, breaks = seq(-0.5, 8.5, by = 1), freq = FALSE) #histogram
mean(x_vec)
variance(x_vec)
var(x_vec)
n*p*(1-p)
m <- 2000
i <- 0
M <- exp(-2.5^2/2)/(2.5*sqrt(2*pi)*(1-pnorm(2.5)))
ratio <- function(y){sqrt(2*pi)*exp(-y^2/2 + 2.5*(y-2.5) + 2.5^2/2)}
x_vec <- NULL
while(i <= m){
y <- rexp(1, 2.5) + 2.5
u <- runif(1)
if(u <= ratio(y)){
x_vec <- c(x_vec, y)
i <- i+1
}
}
hist(x_vec, breaks = 20, freq = FALSE) #histrogram
mean(x_vec)
M <- exp(-2.5^2/2)/(2.5*sqrt(2*pi)*(1-pnorm(2.5)))
lambda <- (2.5 + sqrt(2.5^2+4))/2
lambda
M2 <- exp(-lambda^2/2-2.5*lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M
M2
M2 <- exp(-lambda^2/2+2.5*lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M2
lambda <- (2.5 + sqrt(2.5^2-4))/2
M2 <- exp(-lambda^2/2+2.5*lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M2
M2 <- exp(lambda^2/2-2.5*lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M2
lambda<-2.5
M2 <- exp(lambda^2/2-2.5*lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M2
lambda <- (2.5 + sqrt(2.5^2+4))/2
lambda
M2 <- exp(lambda^2/2-2.5*lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M2
5+sqrt(41)
(5+sqrt(41))/4
seed(123)
set.seed(123)
rnorm(10)
set.seed(123)
rnorm(2)
rnorm(2)
rnorm(2)
set.seed(123)
rnorm(2)
1+3+4
x<-5
rnorm(2)
lambda <- 2.5
M <- exp(lambda^2/2-2.5 * lambda)/(lambda*sqrt(2*pi)*(1-pnorm(2.5)))
M
lambda <- (2.5 + sqrt(2.5^2+4))/2
lambda
install.packages("F:/scRNA/draft/02Draft_for_journal/Submission/v3/BUSseq_0.99.6.tar.gz", repos = NULL, type = "source")
remove.packages(BUSseq)
remove.packages("BUSseq")
vignette("BUSseq")
vignette(package="BUSseq")
install.packages("F:/scRNA/draft/02Draft_for_journal/Submission/v3/BUSseq_0.99.6.tar.gz", repos = NULL, type = "source")
vignette(package="BUSseq")
load("F:/scRNA/code/Github_reproduce/Human_Pancreas/RawCountData/pancreas_normalized_countdata.RData")
load("F:/scRNA/code/Github_reproduce/Human_Pancreas/RawCountData/pancreas_metadata.RData")
grades <- readClipboard()
grades
grades <- as.numeric(grades)
boxplot(grades)
?boxplot
abline(v=90,lty=2)
?abline
boxplot(grades)
abline(v=90,lty=2)
abline(v=60,lty=2)
hist(grades)
library(RColorBrewer)
library(gplots)
library("devtools")
library(Rtsne)
library(ggplot2)
library(mclust)
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
# load synthetic data
# load("F:/scRNA/code/0601Cpp_BUSseq/data/synthetic_data.RData")
# set work directory
workdir <- "F:/scRNA/code/0601Cpp_BUSseq/pancreas"
image_dir <- paste(workdir,"/image",sep="")
dir.create(image_dir)
# Loading the true cell type indicators
setwd(workdir)
load("RawCountData/pancreas_countdata.RData")
load("RawCountData/pancreas_metadata.RData")
cell_type <- all.meta$CellType
N<-length(cell_type)
celltype_matched <- NULL
B<-4
for(b in 1:B){
sample_match <- match(colnames(PancreasCounts[[b]]),all.meta$Sample)
celltype_matched <- c(celltype_matched,cell_type[sample_match])
}
w_true<-rep(NA,N)
w_true[which(celltype_matched=="Alpha")]<-1
w_true[which(celltype_matched=="Beta")]<-2
w_true[which(celltype_matched=="Delta")]<-3
w_true[which(celltype_matched=="Gamma")]<-4
w_true[which(celltype_matched=="Acinar")]<-5
w_true[which(celltype_matched=="Ductal")]<-6
w_true[which(celltype_matched=="other")]<-7
# Load dimension
dim <- read.table("RawCountData/dim_pancreas_v1.txt")
dim <- unlist(dim)
N <- dim[1]
G <- dim[2]
B <- dim[3]
nb <- dim[3+1:B]
# # Loading the previous estimation of cell type indicators
# load("F:/scRNA/code/Github_reproduce/Human_Pancreas/Workspace/BUSseq_workspace.RData")
# w_pres<-unlist(BUSseqfits_pancreas$w.est)
######################################################
#Likelihood comparison among different initial values#
######################################################
# proj <- "pancreas"
# dir.create(image_dir)
# setwd(workdir)
# rep<-5
# k_sel <- 7:11
# N_k <- length(k_sel)
#
# BIC.record <- matrix(NA,N_k,rep)
# BIC_revised.record <- matrix(NA,N_k,rep)
# num_intri <- matrix(NA,N_k,rep)
# tau0sq_record <- matrix(NA,N_k,rep)
# ARI <- matrix(NA,N_k,rep)
# ARI_pre <- matrix(NA,N_k,rep)
#
# colnames(BIC.record) <- paste0("rep",1:rep)
# rownames(BIC.record) <- paste0("K=",k_sel)
# colnames(BIC_revised.record) <- paste0("rep",1:rep)
# rownames(BIC_revised.record) <- paste0("K=",k_sel)
# colnames(num_intri) <- paste0("rep",1:rep)
# rownames(num_intri) <- paste0("K=",k_sel)
# colnames(tau0sq_record) <- paste0("rep",1:rep)
# rownames(tau0sq_record) <- paste0("K=",k_sel)
# colnames(ARI) <- paste0("rep",1:rep)
# rownames(ARI) <- paste0("K=",k_sel)
#
#
# for(v in 4){
#   for(k in k_sel){
#     for(r in 1:rep){
#       ver<- paste(proj,"_v",v,"_K",k,"_r",r,sep="")
#       post_dir<-paste(workdir,"/Inference_",ver,sep="")
#       setwd(post_dir)
#       if(file.exists("BIC.txt")){
#         BIC<- unlist(read.table("BIC.txt"))
#         BIC.record[k-k_sel[1] + 1,r] <- BIC[1]
#         BIC_revised.record[k - k_sel[1] +1,r] <- BIC[2]
#       }else{
#         message(paste("The BIC of",ver,"doesn't exist!/n"))
#       }
#       if(file.exists("IG_est.txt")){
#         IG_est<- unlist(read.table("IG_est.txt"))
#         num_intri[k-k_sel[1] + 1, r] <- sum(IG_est)
#       }else{
#         message(paste("The intrinsic gene inference of",ver,"doesn't exist!/n"))
#       }
#       if(file.exists("tau0_est.txt")){
#         tau0sq_record[k-k_sel[1] + 1, r]<- unlist(read.table("tau0_est.txt"))
#       }else{
#         message(paste("The tau0^2 estimation of",ver,"doesn't exist!/n"))
#       }
#       if(file.exists("w_est.txt")){
#         w_est <- unlist(read.table("w_est.txt"))
#         ARI[k-k_sel[1] + 1, r]<- adjustedRandIndex(w_true,w_est)
#         ARI_pre[k-k_sel[1] + 1, r]<- adjustedRandIndex(w_pres,w_est)
#       }else{
#         message(paste("The tau0^2 estimation of",ver,"doesn't exist!/n"))
#       }
#     }
#   }
# }
# BIC.record
# BIC_revised.record
# num_intri
# tau0sq_record
# ARI
# ARI_pre
#
# # Copy to Excel by clipboard
# write.table(BIC.record, "clipboard", sep="\t", row.names=FALSE)
# write.table(BIC_revised.record, "clipboard", sep="\t", row.names=FALSE)
# write.table(num_intri, "clipboard", sep="\t", row.names=FALSE)
# write.table(tau0sq_record, "clipboard", sep="\t", row.names=FALSE)
# write.table(ARI, "clipboard", sep="\t", row.names=FALSE)
# write.table(ARI_pre, "clipboard", sep="\t", row.names=FALSE)
#
# BIC_K<-apply(BIC.record,1,min)
# jpeg(paste(image_dir,"/",proj,"_v",v,"_BIC.jpg",sep=""),width = 540, height = 720)
# plot(k_sel,BIC_K,xlab=NA,ylab = NA,type="n",cex.axis=3)
# points(k_sel,BIC_K,type="b",pch=19,cex=3)
# dev.off()
#
# BIC_revised_K<-apply(BIC_revised.record,1,min)
# jpeg(paste(image_dir,"/",proj,"_v",v,"_BIC_revised.jpg",sep=""),width = 540, height = 720)
# plot(k_sel,BIC_revised_K,xlab=NA,ylab = NA,type="n",cex.axis=3)
# points(k_sel,BIC_revised_K,type="b",pch=19,cex=3)
# dev.off()
##########################
#load posterior inference#
##########################
proj <- "pancreas"
v <- 1
K <- 8
r <- 2
k.est <- paste0("K",K,"_r",r)
ver<-paste(proj,"_v",v,"_",k.est,sep="")
ver
setwd(paste(workdir,"/Inference_",ver,sep=""))
# load w_est
w.est <- read.table("w_est.txt")
w.est <- unlist(w.est)
# load alpha_est
# alpha.post <- as.matrix(read.big.matrix("alpha_post.txt",sep=" ",skip=num.burntin,type="double"))
alpha.est <- read.table("alpha_est.txt")
alpha.est <- unlist(alpha.est)
# load beta_est
beta.est <- read.table("beta_est.txt")
beta.est <- matrix(unlist(beta.est),G,K)
logmu.est<-beta.est+alpha.est
# check
# gene_index <- 1:500
# plot(alpha.est[gene_index] + beta.est[gene_index,1], col = 2, ylim =c(1,6))
# points(alpha.est[gene_index] + beta.est[gene_index,2], col =3)
# points(alpha.est[gene_index] + beta.est[gene_index,3], col =4)
# points(alpha.est[gene_index] + beta.est[gene_index,4], col =5)
# points(alpha.est[gene_index] + beta.est[gene_index,5], col =6)
# lines(alpha.syn[gene_index] + beta.syn[gene_index,1], lty = 2, col = 2)
# lines(alpha.syn[gene_index] + beta.syn[gene_index,2], lty = 2, col = 3)
# lines(alpha.syn[gene_index] + beta.syn[gene_index,3], lty = 2, col = 4)
# lines(alpha.syn[gene_index] + beta.syn[gene_index,4], lty = 2, col = 5)
# lines(alpha.syn[gene_index] + beta.syn[gene_index,5], lty = 2, col = 6)
# load nu_est
nu.est <- read.table("nu_est.txt")
nu.est <- matrix(unlist(nu.est),G,B)
# plot(nu.est[,1],ylim = c(0,5),col=2)
# points(nu.est[,2],col =3)
# points(nu.est[,3],col =4)
# points(nu.est[,4],col =5)
# lines(nu.syn[1,],col =2, lty = 2)
# lines(nu.syn[2,],col =3, lty = 2)
# lines(nu.syn[3,],col =4, lty = 2)
# lines(nu.syn[4,],col =5, lty = 2)
# load delta_est
delta.est <- read.table("delta_est.txt")
delta.est <- unlist(delta.est)
plot(delta.est,col=rep(1:B,nb) + 1)
# load gamma_est
gamma.est <- read.table("gamma_est.txt")
gamma.est <- matrix(unlist(gamma.est),B,2)
# load phi_est
phi.est <- read.table("phi_est.txt")
phi.est <- matrix(unlist(phi.est),G,B)
# load pi_est
pi.est <- read.table("pi_est.txt")
pi.est <- matrix(unlist(pi.est),B,K)
order.est<-order(pi.est[1,],decreasing = T)
# load p_est
p.est <- read.table("p_est.txt")
# load tau0_est
tau0.est <- read.table("tau0_est.txt")
# load PPI_est
PPI.est <- read.table("PPI_est.txt")
D.est <- unlist(read.table("IG_est.txt"))
# load X_imputed
x_imputed <- read.table("x_imputed.txt")
y_obs <- read.table(paste0(workdir,"/RawCountData/count_data_pancreas_v1.txt"))
adjusted_values<-function(Truereads, .B, .nb, .N, .G, .K,
.alpha,.beta,.nu,.delta,.phi,.w){
read_corrected <- Truereads
.w <- .w + 1
for(b in 1:.B){
for(i in 1:.nb[b]){
if(b==1){
row.index <- i
}else{
row.index <- i + sum(.nb[1:(b-1)])
}
for(j in 1:.G){
p_x<-pnbinom(Truereads[j,row.index],size = .phi[j,b], mu = exp(.alpha[j] + .beta[j,.w[row.index]] + .nu[j,b] + .delta[row.index]))
p_xminus1<-pnbinom(Truereads[j,row.index]-1,size = .phi[j,b], mu = exp(.alpha[j] + .beta[j,.w[row.index]] + .nu[j,b] + .delta[row.index]))
u <- runif(1,min=p_xminus1,max=p_x)
u <- min(u,0.999)
read_corrected[j,row.index] <- qnbinom(u,size =.phi[j,1], mu = exp(.alpha[j] + .beta[j,.w[row.index]]))
}
print(paste("Finish the ",row.index,"-th cell",sep=""))
}
}
return(read_corrected)
}
start_time<-Sys.time()
print("Calculate corrected read counts:")
x_corrected<-adjusted_values(x_imputed, B, nb, N, G, K,
alpha.est,beta.est,nu.est,delta.est,phi.est,w.est)
end_time<-Sys.time()
running_time<-end_time-start_time
print(running_time)
dim(x_corrected)
sil_BUSseq_cpp <- silhouette_cal(t(log1p(x_corrected[which(D.est==1),])),w.est)
silhouette_cal<-function(Reads,#N * G
sub_ind){
N<- nrow(Reads)
sil_coef <- rep(NA,N)
all.dists <- as.matrix(dist(Reads))
for(i in 1:N){
clust_index <- which(sub_ind==sub_ind[i])
other_index <- which(sub_ind!=sub_ind[i])
aver_dist <- sum(all.dists[i,clust_index])/length(clust_index-1)
min_dist <- min(all.dists[i,other_index])
sil_coef[i] <-  (min_dist - aver_dist)/max(aver_dist,min_dist)
}
return(sil_coef)
}
sil_BUSseq_cpp <- silhouette_cal(t(log1p(x_corrected[which(D.est==1),])),w.est)
length(silhouette_cpp)
length(sil_BUSseq_cpp)
save.image(paste(workdir,"/progress/summary_",ver,".Rdata",sep=""))
ver
PancreasCounts[[1]][1:10,1:10]
